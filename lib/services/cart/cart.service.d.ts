import { ReplaySubject } from 'rxjs/ReplaySubject';
import { Observable } from 'rxjs/Observable';
import { MaAuthService } from '../auth/auth.service';
import { MaApiCartService } from '../../modules/api-module/api-cart/api-cart.service';
import { MaApiProductVariation } from '../../modules/api-module/api-product';
import { MaApiCartListResponse, MaApiSetItemData, MaApiSetItemResponse, MaApiCartListData, MaApiSetDeliveryData, MaApiSetPaymentData, MaApiDeliveryOption, MaApiMakeOrderResponse, MaApiCartProduct, MaApiMakeOrderData } from '../../modules/api-module/api-cart/api-cart.model';
import { MaApiResponse } from '../../modules/api-module';
export declare class MaCartService<CLR extends MaApiCartListResponse<any>, PV extends MaApiProductVariation<any, any, any>, CP extends MaApiCartProduct<any, any, any, any>, CLD extends MaApiCartListData<any, any, any, any, any, any, any>, IR extends MaApiSetItemResponse<any>, MO extends MaApiMakeOrderResponse, SPD extends MaApiSetPaymentData, DO extends MaApiDeliveryOption<any, any>, DD extends MaApiSetDeliveryData, SID extends MaApiSetItemData> {
    protected apiCartService: MaApiCartService<CLR, SID, IR, DD, MaApiResponse, SPD, MaApiMakeOrderData<any>, MO>;
    protected authService: MaAuthService<any, any, any, any, any, any, any, any, any, any>;
    protected sidebarCartOpenSubject$: ReplaySubject<boolean>;
    protected cartListSubject$: ReplaySubject<CLR>;
    protected relatedProductsData$: ReplaySubject<PV[]>;
    protected cartList: CLR;
    protected cartId: number;
    constructor(apiCartService: MaApiCartService<CLR, SID, IR, DD, MaApiResponse, SPD, MaApiMakeOrderData<any>, MO>, authService: MaAuthService<any, any, any, any, any, any, any, any, any, any>);
    getCartList(): Observable<CLR>;
    refreshCartList(): void;
    protected updateCartList(data: CLR): void;
    watchCartList(): Observable<CLR>;
    getProduct(id: string): CP;
    getCartData(): CLD;
    getItemsCount(): number;
    getCartId(): number;
    watchSidebarCartOpen(): Observable<boolean>;
    watchRelatedProducts(): Observable<PV[]>;
    protected updateRelatedProducts(response: IR): void;
    addElement(productId: number): Observable<IR>;
    removeElement(productId: number): Observable<IR>;
    clear(): void;
    changeQuantity(productId: number, quantity: number): Observable<IR>;
    changeSize(oldProductId: number, newProductId: number, quantity: number): Observable<IR>;
    setDelivery(id: number, parcel?: string): void;
    getSelectedDeliveryOption(): DO;
    isDeliveryInpost(): boolean;
    isSalonDelivery(): boolean;
    setPayment(type: string): void;
    makeOrder(makeOrderData: any): Observable<MO>;
    validateCart(): boolean;
}
