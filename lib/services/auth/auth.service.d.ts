import { ReplaySubject } from 'rxjs/ReplaySubject';
import { Observable } from 'rxjs/Observable';
import { CookieService } from 'ngx-cookie-service';
import { MaApiUserService } from '../../modules/api-module/api-user/api-user.service';
import { MaApiUserAuthorizeData, MaApiUserAuthorizeResponse, MaApiUserData, MaApiUserRegisterData, MaApiUserRegisterResponse, MaApiUserAuthorizeResponseData, MaApiUserRemindData, MaApiFbAuthorizeData, MaApiFbAuthorizeResponse, MaApiUserTokenResponse, MaApiUserChangePasswordData, MaApiUserAddressResponse, MaApiUserOrderListResponse } from '../../modules/api-module/api-user/api-user.model';
import { MaApiResponse } from '../../modules/api-module';
export declare const MaTokenKeyName = "session-token";
export declare class MaAuthService<UD extends MaApiUserData, ARD extends MaApiUserAuthorizeResponseData, AD extends MaApiUserAuthorizeData, AR extends MaApiUserAuthorizeResponse<any>, FAD extends MaApiFbAuthorizeData, FAR extends MaApiFbAuthorizeResponse, RD extends MaApiUserRegisterData, RR extends MaApiUserRegisterResponse, URD extends MaApiUserRemindData, R extends MaApiResponse> {
    protected apiUserService: MaApiUserService<AD, AR, FAD, FAR, RD, RR, MaApiUserOrderListResponse<any>, MaApiUserAddressResponse<any, any>, MaApiUserChangePasswordData, MaApiUserTokenResponse<any>, URD, R>;
    protected cookieService: CookieService;
    protected authorized: boolean;
    protected authorizeSubject$: ReplaySubject<boolean>;
    protected userData: UD;
    protected userDataSubject$: ReplaySubject<UD>;
    protected token: string;
    constructor(apiUserService: MaApiUserService<AD, AR, FAD, FAR, RD, RR, MaApiUserOrderListResponse<any>, MaApiUserAddressResponse<any, any>, MaApiUserChangePasswordData, MaApiUserTokenResponse<any>, URD, R>, cookieService: CookieService);
    populate(clear?: boolean): Promise<boolean>;
    protected setUserData(data: ARD): void;
    authorize(auth: AD): Observable<AR>;
    fbAuthorize(auth: FAD): Observable<FAR>;
    register(register: RD): Observable<RR>;
    remind(remind: URD): Observable<R>;
    protected setAuthorized(auth: boolean): void;
    watchAuthorized(): Observable<boolean>;
    isAuthorized(): boolean;
    watchUserData(): Observable<UD>;
    getUserData(): UD;
    clearData(): void;
    logout(): void;
}
