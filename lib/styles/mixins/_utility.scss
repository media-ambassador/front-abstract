/// Ustawienie wielkości elementu
///
/// @group mixin utility
///
/// @param {Length} $width - Element's width
/// @param {Length} $height [$width] - Element's height
///
/// @example scss - Sizing `.foo`
///   .foo {
///     @include size(30px, 50px);
///   }

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Nadanie koloru elementowi SVG
///
/// @group mixin utility
///
/// @param {Name} $color - nazwa
/// @param {Number} $color-tone [1] - odcień koloru
///
/// @example scss - Color `svg` element
///   svg {
///     @include svg-fill(red, 2);
///   }
@mixin svg-fill($color, $color-tone: 1, $shape: path) {
	#{$shape} {
		fill: color($color, $color-tone) !important;
	}
}

/// Nadanie koloru elementowi SVG z ng-deep
///
/// @group mixin utility
///
/// @param {Name} $color - nazwa
/// @param {Number} $color-tone [1] - odcień koloru
///
/// @example scss - Color `svg` element
///   svg {
///     @include svg-fill(red, 2);
///   }
@mixin svg-fill-deep($color, $color-tone: 1, $shape: path) {
  &::ng-deep { @include svg-fill($color, $color-tone, $shape) }
}

/// Ostylowanie elementu SVG (wielkośc i kolor)
///
/// @group mixin utility
///
/// @param {Length} $width - Element's width
/// @param {Length} $height [$width] - Element's height
/// @param {Name} $color - nazwa
/// @param {Number} $color-tone [1] - odcień koloru
///
/// @example scss - Style `svg` element
///   svg {
///     @include svg(20px, 30px, red, 2);
///   }
@mixin svg($wight, $height, $color, $tone: 1, $shape: path) {
  @include size($wight, $height);
  @include svg-fill($color, $tone, $shape);
}

/// Ostylowanie elementu SVG osadzone w ng-deep (wielkośc i kolor)
///
/// @group mixin utility
///
/// @param {Length} $width - Element's width
/// @param {Length} $height [$width] - Element's height
/// @param {Name} $color - nazwa
/// @param {Number} $color-tone [1] - odcień koloru
///
/// @example scss - Style `svg` element
///   svg {
///     @include svg(20px, 30px, red, 2);
///   }
@mixin svg-deep($wight, $height, $color, $tone: 1, $shape: path) {
  &::ng-deep { @include svg($wight, $height, $color, $tone, $shape) }
}

/// Wycentrowanie elementu
///
/// @group mixin utility
///
///
/// @example Center `div`
///   div {
///     @include center();
///   }
@mixin center() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/// Ustawienie elementu jako flex
///
/// @group mixin utility
///
/// @param {Length} $fd - [row] flex direction
/// @param {Length} $jc [flex-start] justify content
/// @param {Length} $ai [center] align items
///
/// @example Center `div`
///   div {
///     @include flex();
///   }
@mixin flex($fd: row, $jc: flex-start, $ai: center) {
  display: flex;
  flex-direction: $fd;
  justify-content: $jc;
  align-items: $ai;
}

/// Wyśrodkowanie elementu
///
/// @group mixin utility
///
///
/// @example Center `div`
///   div {
///     @include margin-center();
///   }
@mixin margin-center {
  margin: {
    left: auto;
    right: auto;
  }
}

/// Domyślne style dla pseudoelementu
///
/// @group mixin utility
///
/// @param {Value} $display [block]
/// @param {Value} $display [static]
/// @param {String} $display ['']
///
/// @example Center `div`
///   div::before {
///     @include pseudo();
///   }
@mixin pseudo($display: block, $pos: static, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

/// Ostylowanie input placeholder
///
/// @group mixin utility
///
/// @example Style `::placeholder`
///   input {
///     @include input-placeholder() {
///       color: white;
///       font-size: 15px;
///     };
///   }
@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

/// Nadanie border-radius na górze elementu
///
/// @group mixin utility
///
/// @param {Value} $radii - wartość w px
@mixin border-top-radius($radii) {
  border-top-left-radius: $radii;
  border-top-right-radius: $radii;
}

/// Nadanie border-radius po prawej stronie elementu
///
/// @group mixin utility
///
/// @param {Value} $radii - wartość w px
@mixin border-right-radius($radii) {
  border-bottom-right-radius: $radii;
  border-top-right-radius: $radii;
}

/// Nadanie border-radius na dole elementu
///
/// @group mixin utility
///
/// @param {Value} $radii - wartość w px
@mixin border-bottom-radius($radii) {
  border-bottom-left-radius: $radii;
  border-bottom-right-radius: $radii;
}

/// Nadanie border-radius po lewej stronie elementu
///
/// @group mixin utility
///
/// @param {Value} $radii - wartość w px
@mixin border-left-radius($radii) {
  border-bottom-left-radius: $radii;
  border-top-left-radius: $radii;
}

/// Ukrycie elementu
///
/// @group mixin utility
///
@mixin hidden {
  display: none !important;
  visibility: hidden !important;
}

///  Wspólne style dla pseudoklas hover, actice, focus
///
/// @group mixin utility
///
/// @example Style `::placeholder`
///   a {
///     @include hover-active-focus() {
///       outline: none;
///       text-decoration: undeline;
///     };
///   }
@mixin hover-active-focus {
  &:hover, &:active, &:focus {
    @content;
  }
}

/// Generates a triangle pointing in a specified direction.
///
/// @group mixin utility
///
/// @argument {string} $direction
///   The direction the triangle should point. Accepts `up`, `up-right`,
///   `right`, `down-right`, `down`, `down-left`, `left` or `up-left`.
///
/// @argument {number (with unit)} $width
///   Width of the triangle.
///
/// @argument {number (with unit)} $height
///   Height of the triangle.
///
/// @argument {color} $color
///   Color of the triangle.
///
/// Usage:
/// @example scss
///   .element {
///     &::before {
///       @include triangle("up", 2rem, 1rem, #b25c9c);
///       content: "";
///     }
///   }
///
///   // CSS Output
///   .element::before {
///     border-style: solid;
///     height: 0;
///     width: 0;
///     border-color: transparent transparent #b25c9c;
///     border-width: 0 1rem 1rem;
///     content: "";
///   }

@mixin triangle(
  $direction,
  $width,
  $height,
  $color
) {
  @if not index(
    "up" "up-right" "right" "down-right" "down" "down-left" "left" "up-left",
    $direction
  ) {
    @error "Direction must be `up`, `up-right`, `right`, `down-right`, " +
           "`down`, `down-left`, `left` or `up-left`.";
  } @else if not _is-color($color) {
    @error "`#{$color}` is not a valid color for the `$color` argument in " +
           "the `triangle` mixin.";
  } @else {
    border-style: solid;
    height: 0;
    width: 0;

    @if $direction == "up" {
      border-color: transparent transparent $color;
      border-width: 0 ($width / 2) $height;
    } @else if $direction == "up-right" {
      border-color: transparent $color transparent transparent;
      border-width: 0 $width $width 0;
    } @else if $direction == "right" {
      border-color: transparent transparent transparent $color;
      border-width: ($height / 2) 0 ($height / 2) $width;
    } @else if $direction == "down-right" {
      border-color: transparent transparent $color;
      border-width: 0 0 $width $width;
    } @else if $direction == "down" {
      border-color: $color transparent transparent;
      border-width: $height ($width / 2) 0;
    } @else if $direction == "down-left" {
      border-color: transparent transparent transparent $color;
      border-width: $width 0 0 $width;
    } @else if $direction == "left" {
      border-color: transparent $color transparent transparent;
      border-width: ($height / 2) $width ($height / 2) 0;
    } @else if $direction == "up-left" {
      border-color: $color transparent transparent;
      border-width: $width $width 0 0;
    }
  }
}